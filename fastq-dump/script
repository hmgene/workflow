#!/bin/bash

cd /cromwell_root
tmpDir=$(mktemp -d "$PWD"/tmp.XXXXXX)
chmod 777 "$tmpDir"
export _JAVA_OPTIONS=-Djava.io.tmpdir="$tmpDir"
export TMPDIR="$tmpDir"


(
cd /cromwell_root

)


out9dfa0640="${tmpDir}/out.$$" err9dfa0640="${tmpDir}/err.$$"
mkfifo "$out9dfa0640" "$err9dfa0640"
trap 'rm "$out9dfa0640" "$err9dfa0640"' EXIT
touch '/cromwell_root/stdout' '/cromwell_root/stderr'
tee '/cromwell_root/stdout' < "$out9dfa0640" &
tee '/cromwell_root/stderr' < "$err9dfa0640" >&2 &
(
cd /cromwell_root


set -e
export TMPDIR=/tmp

python <<CODE
import re
import pandas as pd
from subprocess import check_call

df = pd.read_csv('/cromwell_root/fc-secure-387f19e5-0d81-411b-9524-aec54db8e20a/Hyunmin/starsolo_test/input_within_terra.csv', sep = '\t', header = 0, dtype = str, index_col = False)
for c in df.columns:
    df[c] = df[c].str.strip()

regex_pat = re.compile('[^a-zA-Z0-9_-]')
if any(df['Sample'].str.contains(regex_pat)):
    print('Sample must contain only alphanumeric characters, hyphens, and underscores.')
    print('Examples of common characters that are not allowed are the space character and the following: ?()[]/\=+<>:;"\',*^| &')
    sys.exit(1)

with open('sample_ids.txt', 'w') as fo1, open('sample_r1.tsv', 'w') as fo2, open('sample_r2.tsv', 'w') as fo3:
    for idx, row in df.iterrows():
        fo1.write(row['Sample'] + '\n')

        if 'Flowcells' in df.columns: # Fetch R1 and R2 fastqs automatically.
            input_dir_list = list(map(lambda x: x.strip(), row['Flowcells'].split(',')))
            r1_list = []
            r2_list = []
            for directory in input_dir_list:
                directory = re.sub('/+$', '', directory)

                call_args = ['gsutil', 'ls', directory]
                # call_args = ['ls', directory]
                with open('list_dir.txt', 'w') as tmp_fo:
                    check_call(call_args, stdout=tmp_fo)

                with open('list_dir.txt', 'r') as tmp_fin:
                    f_list = tmp_fin.readlines()
                    f_list = list(map(lambda s: s.strip(), f_list))

                r1_files = [f for f in f_list if re.match('.*_R1_.*.fastq.gz', f)]
                r2_files = [f for f in f_list if re.match('.*_R2_.*.fastq.gz', f)]
                r1_files.sort()
                r2_files.sort()
                # r1_files = list(map(lambda s: directory+'/'+s, r1_files))
                # r2_files = list(map(lambda s: directory+'/'+s, r2_files))

                r1_list.extend(r1_files)
                r2_list.extend(r2_files)

        else:  # R1 and R2 fastqs specified in sample sheet.
            r1_list = list(map(lambda s: s.strip(), row['R1'].split(',')))
            r2_list = list(map(lambda s: s.strip(), row['R2'].split(',')))

        fo2.write(row['Sample'] + '\t' + ','.join(r1_list) + '\n')
        fo3.write(row['Sample'] + '\t' + ','.join(r2_list) + '\n')
CODE
)  > "$out9dfa0640" 2> "$err9dfa0640"
echo $? > /cromwell_root/rc.tmp
(
# add a .file in every empty directory to facilitate directory delocalization on the cloud
cd /cromwell_root
find . -type d -exec sh -c '[ -z "$(ls -A '"'"'{}'"'"')" ] && touch '"'"'{}'"'"'/.file' \;
)
(
cd /cromwell_root
sync


)
mv /cromwell_root/rc.tmp /cromwell_root/rc
